import pandas as pd
import numpy as np
import dask.dataframe as dd
from sklearn import preprocessing
import warnings, sys
if not sys.warnoptions:
    warnings.simplefilter("ignore")


def test_rename_Census_ActivationChannel(df):
    # Expected unique values after renaming
    expected_unique_values = {'oem', 'volume', 'retail'}
    
    # Unique values before renaming (not relevant here but useful for debugging)
    unique_values_before = df['Census_ActivationChannel'].unique()
    print("Unique values before renaming:")
    print(unique_values_before)
    
    # Unique values after renaming
    unique_values_after = set(df['Census_ActivationChannel'].unique())
    print("\nUnique values after renaming:")
    print(unique_values_after)
    
    # Assert that the unique values after renaming match the expected values
    assert unique_values_after.issubset(expected_unique_values), f"Unexpected values found: {unique_values_after - expected_unique_values}"
    
    # Print sample rows to manually check renaming
    print("\nSample rows after renaming:")
    print(df[['Census_ActivationChannel']].sample(5))
    
    # Assert statements to check specific sample values
    sample_values = df['Census_ActivationChannel'].sample(100).tolist()
    for value in sample_values:
        assert value in expected_unique_values, f"Unexpected value: {value}"
    
    # Count occurrences after renaming
    count_after = df['Census_ActivationChannel'].value_counts()
    print("\nCount of occurrences after renaming:")
    print(count_after)
    
    # Assert that the sum of counts matches the length of the DataFrame (ensuring no data loss)
    assert count_after.sum() == len(df), "Mismatch in the total number of entries after renaming"
    
    # Assert that each category count is non-zero (ensuring all categories are represented)
    for category in expected_unique_values:
        assert category in count_after.index, f"Category '{category}' not found in the renamed values"
        assert count_after[category] > 0, f"Category '{category}' has zero occurrences"
    
    # Print final confirmation that all tests passed
    print("All tests passed!")






def test_rename_Census_ChassisTypeName(df):
    # Expected unique values after renaming
    expected_unique_values = {'31', 'busexpansionchassis', '36', 'subnotebook', '44', 'lunchbox', '81', 'bladeenclosure', 'subchassis', '30', '39', 'expansionchassis', 'spacesaving', '0', 'multisystemchassis', 'convertible', 'mainserverchassis', '49', '88', 'lowprofiledesktop', 'pizzabox', '76', '112', 'compactpci', 'iotgateway', 'desktop', '28', 'sealedcasepc', '35', '45', 'minipc', 'minitower', '127', 'portable', 'stickpc', 'tower', '32', 'notebook', 'dockingstation', 'blade', 'unknown', '82', '25', 'rackmountchassis', 'tablet', 'detachable', 'handheld', 'embeddedpc', 'allinone'}
    
    # Unique values before renaming
    unique_values_before = df['Census_ChassisTypeName'].unique()
    print("Unique values before renaming:")
    print(unique_values_before)
    
    # Apply the renaming function
    df['Census_ChassisTypeName'] = df['Census_ChassisTypeName'].fillna('unknown')
    df['Census_ChassisTypeName'] = df['Census_ChassisTypeName'].astype(str)
    df['Census_ChassisTypeName'] = df['Census_ChassisTypeName'].apply(rename_Census_ChassisTypeName)
    df['Census_ChassisTypeName'] = df['Census_ChassisTypeName'].astype('category')
    df['Census_ChassisTypeName'] = df['Census_ChassisTypeName'].cat.remove_unused_categories()
    
    # Unique values after renaming
    unique_values_after = set(df['Census_ChassisTypeName'].unique())
    print("\nUnique values after renaming:")
    print(unique_values_after)
    
    # Assert that the unique values after renaming match the expected values
    assert unique_values_after.issubset(expected_unique_values), f"Unexpected values found: {unique_values_after - expected_unique_values}"
    
    # Print sample rows to manually check renaming
    print("\nSample rows after renaming:")
    print(df[['Census_ChassisTypeName']].sample(5))
    
    # Assert statements to check specific sample values
    sample_values = df['Census_ChassisTypeName'].sample(100).tolist()
    for value in sample_values:
        assert value in expected_unique_values, f"Unexpected value: {value}"
    
    # Count occurrences after renaming
    count_after = df['Census_ChassisTypeName'].value_counts()
    print("\nCount of occurrences after renaming:")
    print(count_after)
    
    # Assert that the sum of counts matches the length of the DataFrame (ensuring no data loss)
    assert count_after.sum() == len(df), "Mismatch in the total number of entries after renaming"
    
    # Assert that each category count is non-zero (ensuring all categories are represented)
    for category in expected_unique_values:
        assert category in count_after.index, f"Category '{category}' not found in the renamed values"
        assert count_after[category] > 0, f"Category '{category}' has zero occurrences"
